"""New tables - CPCurve and NASAPolynomial

Revision ID: 9132b91c1138
Revises: ba1e888f2fbc
Create Date: 2025-08-26 21:01:29.558106

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9132b91c1138"
down_revision: Union[str, Sequence[str], None] = "ba1e888f2fbc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cp_curve",
        sa.Column("conformer_id", sa.BigInteger(), nullable=False),
        sa.Column("T_K", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "Cp_J_per_molK", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("raw_units", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("Cp0_raw", sa.Float(), nullable=True),
        sa.Column("CpInf_raw", sa.Float(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["conformer_id"], ["conformer.conformer_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("conformer_id"),
    )
    op.create_table(
        "nasa_polynomial",
        sa.Column("poly_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("conformer_id", sa.BigInteger(), nullable=False),
        sa.Column("form", sa.String(), nullable=False),
        sa.Column("Tmin_K", sa.Float(), nullable=False),
        sa.Column("Tmax_K", sa.Float(), nullable=False),
        sa.Column("a1", sa.Float(), nullable=False),
        sa.Column("a2", sa.Float(), nullable=False),
        sa.Column("a3", sa.Float(), nullable=False),
        sa.Column("a4", sa.Float(), nullable=False),
        sa.Column("a5", sa.Float(), nullable=False),
        sa.Column("a6", sa.Float(), nullable=False),
        sa.Column("a7", sa.Float(), nullable=False),
        sa.Column("fit_rmse", sa.Float(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["conformer_id"], ["conformer.conformer_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("poly_id"),
        sa.UniqueConstraint(
            "conformer_id", "Tmin_K", "Tmax_K", "form", name="uq_poly_range"
        ),
    )
    op.create_index(
        op.f("ix_nasa_polynomial_conformer_id"),
        "nasa_polynomial",
        ["conformer_id"],
        unique=False,
    )
    op.add_column(
        "atom_map_to_ts",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "atom_map_to_ts",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "atom_role_map",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "atom_role_map",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "conformer_atom",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "conformer_atom",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_angle",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_angle",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_dihedral",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_dihedral",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_distance",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "geom_distance",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ts_features",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "ts_features",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "well_features", sa.Column("E_elec_units", sa.String(), nullable=True)
    )
    op.add_column("well_features", sa.Column("ZPE_units", sa.String(), nullable=True))
    op.add_column("well_features", sa.Column("H298_units", sa.String(), nullable=True))
    op.add_column("well_features", sa.Column("G298_units", sa.String(), nullable=True))
    op.add_column("well_features", sa.Column("S298", sa.Float(), nullable=True))
    op.add_column("well_features", sa.Column("S298_units", sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("well_features", "S298_units")
    op.drop_column("well_features", "S298")
    op.drop_column("well_features", "G298_units")
    op.drop_column("well_features", "H298_units")
    op.drop_column("well_features", "ZPE_units")
    op.drop_column("well_features", "E_elec_units")
    op.drop_column("ts_features", "updated_at")
    op.drop_column("ts_features", "created_at")
    op.drop_column("geom_distance", "updated_at")
    op.drop_column("geom_distance", "created_at")
    op.drop_column("geom_dihedral", "updated_at")
    op.drop_column("geom_dihedral", "created_at")
    op.drop_column("geom_angle", "updated_at")
    op.drop_column("geom_angle", "created_at")
    op.drop_column("conformer_atom", "updated_at")
    op.drop_column("conformer_atom", "created_at")
    op.drop_column("atom_role_map", "updated_at")
    op.drop_column("atom_role_map", "created_at")
    op.drop_column("atom_map_to_ts", "updated_at")
    op.drop_column("atom_map_to_ts", "created_at")
    op.drop_index(op.f("ix_nasa_polynomial_conformer_id"), table_name="nasa_polynomial")
    op.drop_table("nasa_polynomial")
    op.drop_table("cp_curve")
    # ### end Alembic commands ###
