"""init schema


Revision ID: 97739ec3adf1
Revises: 
Create Date: 2025-08-20 14:23:25.817686

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from db.models import Mol

# revision identifiers, used by Alembic.
revision: str = '97739ec3adf1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE EXTENSION IF NOT EXISTS rdkit;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ingest_batch',
    sa.Column('batch_id', sa.BigInteger(), nullable=False),
    sa.Column('source_label', sa.String(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('batch_id')
    )
    op.create_table('reactions',
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('batch_id', sa.BigInteger(), nullable=True),
    sa.Column('reaction_name', sa.String(), nullable=True),
    sa.Column('family', sa.String(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['ingest_batch.batch_id'], ),
    sa.PrimaryKeyConstraint('reaction_id'),
    sa.UniqueConstraint('reaction_name')
    )
    op.create_table('kinetics_set',
    sa.Column('kin_set_id', sa.BigInteger(), nullable=False),
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('direction', sa.Enum('forward', 'reverse', name='kin_direction', create_constraint=True), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('A', sa.Float(), nullable=False),
    sa.Column('n', sa.Float(), nullable=True),
    sa.Column('Ea_kJ_mol', sa.Float(), nullable=False),
    sa.Column('Tmin_K', sa.Float(), nullable=False),
    sa.Column('Tmax_K', sa.Float(), nullable=False),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('reference', sa.String(), nullable=True),
    sa.Column('computed_from', sa.String(), nullable=True),
    sa.Column('dA_factor', sa.Float(), nullable=True),
    sa.Column('dn_abs', sa.Float(), nullable=True),
    sa.Column('dEa_kJ_mol', sa.Float(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.reaction_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('kin_set_id'),
    sa.UniqueConstraint('reaction_id', 'direction', 'source', 'reference', 'Tmin_K', 'Tmax_K', name='uq_kset_identity')
    )
    op.create_index('idx_kset_T', 'kinetics_set', ['Tmin_K', 'Tmax_K'], unique=False)
    op.create_index('idx_kset_reaction_dir', 'kinetics_set', ['reaction_id', 'direction'], unique=False)
    op.create_table('molecule',
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('R1H', 'R2H', 'TS', name='mol_role', create_constraint=True), nullable=False),
    sa.Column('mol', Mol(), nullable=False),
    sa.Column('smiles', sa.String(), nullable=True),
    sa.Column('inchikey', sa.String(), nullable=True),
    sa.Column('charge', sa.Float(), nullable=True),
    sa.Column('spin_mult', sa.Integer(), nullable=True),
    sa.Column('mw', sa.Float(), nullable=True),
    sa.Column('props', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('source_file', sa.String(), nullable=True),
    sa.Column('record_index', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.reaction_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('molecule_id'),
    sa.UniqueConstraint('reaction_id', 'role', name='uq_molecule_reaction_role')
    )
    op.create_index('idx_molecule_charge', 'molecule', ['charge'], unique=False)
    op.create_index('idx_molecule_spinmult', 'molecule', ['spin_mult'], unique=False)
    op.create_index('ix_molecule_mw', 'molecule', ['mw'], unique=False)
    op.create_index('ix_molecule_role', 'molecule', ['role'], unique=False)
    op.create_table('atom',
    sa.Column('atom_id', sa.BigInteger(), nullable=False),
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('atom_idx', sa.Integer(), nullable=False),
    sa.Column('atomic_num', sa.Integer(), nullable=False),
    sa.Column('formal_charge', sa.Integer(), nullable=True),
    sa.Column('is_aromatic', sa.Boolean(), nullable=True),
    sa.Column('xyz', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['molecule_id'], ['molecule.molecule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('atom_id'),
    sa.UniqueConstraint('molecule_id', 'atom_idx', name='uq_atom_mol_idx')
    )
    op.create_index('idx_atom_molecule', 'atom', ['molecule_id'], unique=False)
    op.create_table('ts_features',
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('imag_freq_cm1', sa.Float(), nullable=True),
    sa.Column('irc_verified', sa.Boolean(), nullable=True),
    sa.Column('level_of_theory', sa.String(), nullable=True),
    sa.Column('E_TS', sa.Float(), nullable=True),
    sa.Column('E_R1H', sa.Float(), nullable=True),
    sa.Column('E_R2H', sa.Float(), nullable=True),
    sa.Column('delta_E_dagger', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['molecule_id'], ['molecule.molecule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('molecule_id')
    )
    op.create_table('atom_map_to_ts',
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('from_role', sa.Enum('R1H', 'R2H', 'TS', name='mol_role', create_constraint=True), nullable=False),
    sa.Column('from_atom_id', sa.BigInteger(), nullable=False),
    sa.Column('ts_atom_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint("from_role in ('R1H','R2H')", name='ck_atommap_fromrole'),
    sa.ForeignKeyConstraint(['from_atom_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.reaction_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ts_atom_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reaction_id', 'from_role', 'from_atom_id')
    )
    op.create_index('idx_atommap_reaction_role', 'atom_map_to_ts', ['reaction_id', 'from_role'], unique=False)
    op.create_table('atom_role_map',
    sa.Column('atom_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('donor', 'acceptor', 'd_hydrogen', 'a_hydrogen', 'none', name='atom_role', create_constraint=True), nullable=False),
    sa.ForeignKeyConstraint(['atom_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('atom_id', 'role')
    )
    op.create_table('geom_angle',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('a3_id', sa.BigInteger(), nullable=False),
    sa.Column('value_deg', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a3_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['molecule_id'], ['molecule.molecule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gang_measure_val', 'geom_angle', ['measure_name', 'value_deg'], unique=False)
    op.create_index('idx_gang_molecule', 'geom_angle', ['molecule_id'], unique=False)
    op.create_table('geom_dihedral',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('a3_id', sa.BigInteger(), nullable=False),
    sa.Column('a4_id', sa.BigInteger(), nullable=False),
    sa.Column('value_deg', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a3_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a4_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['molecule_id'], ['molecule.molecule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gdih_measure_val', 'geom_dihedral', ['measure_name', 'value_deg'], unique=False)
    op.create_index('idx_gdih_molecule', 'geom_dihedral', ['molecule_id'], unique=False)
    op.create_table('geom_distance',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('molecule_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('value_ang', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['molecule_id'], ['molecule.molecule_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gdist_measure_val', 'geom_distance', ['measure_name', 'value_ang'], unique=False)
    op.create_index('idx_gdist_molecule', 'geom_distance', ['molecule_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_gdist_molecule', table_name='geom_distance')
    op.drop_index('idx_gdist_measure_val', table_name='geom_distance')
    op.drop_table('geom_distance')
    op.drop_index('idx_gdih_molecule', table_name='geom_dihedral')
    op.drop_index('idx_gdih_measure_val', table_name='geom_dihedral')
    op.drop_table('geom_dihedral')
    op.drop_index('idx_gang_molecule', table_name='geom_angle')
    op.drop_index('idx_gang_measure_val', table_name='geom_angle')
    op.drop_table('geom_angle')
    op.drop_table('atom_role_map')
    op.drop_index('idx_atommap_reaction_role', table_name='atom_map_to_ts')
    op.drop_table('atom_map_to_ts')
    op.drop_table('ts_features')
    op.drop_index('idx_atom_molecule', table_name='atom')
    op.drop_table('atom')
    op.drop_index('ix_molecule_role', table_name='molecule')
    op.drop_index('ix_molecule_mw', table_name='molecule')
    op.drop_index('idx_molecule_spinmult', table_name='molecule')
    op.drop_index('idx_molecule_charge', table_name='molecule')
    op.drop_table('molecule')
    op.drop_index('idx_kset_reaction_dir', table_name='kinetics_set')
    op.drop_index('idx_kset_T', table_name='kinetics_set')
    op.drop_table('kinetics_set')
    op.drop_table('reactions')
    op.drop_table('ingest_batch')
    # ### end Alembic commands ###
