"""initial baseline after refactor

Revision ID: 6a9bdaedf26e
Revises: 
Create Date: 2025-08-25 22:35:36.003622

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import db
# revision identifiers, used by Alembic.
revision: str = '6a9bdaedf26e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ingest_batch',
    sa.Column('batch_id', sa.BigInteger(), nullable=False),
    sa.Column('source_label', sa.String(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('batch_id')
    )
    op.create_table('level_of_theory',
    sa.Column('lot_id', sa.BigInteger(), nullable=False),
    sa.Column('method', sa.String(), nullable=False),
    sa.Column('basis', sa.String(), nullable=True),
    sa.Column('solvent', sa.String(), nullable=True),
    sa.Column('lot_string', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('lot_id'),
    sa.UniqueConstraint('method', 'basis', 'solvent', name='uq_lot_method_basis_solvent')
    )
    op.create_index('idx_lot_method_basis', 'level_of_theory', ['method', 'basis'], unique=False)
    op.create_table('species',
    sa.Column('species_id', sa.BigInteger(), nullable=False),
    sa.Column('smiles', sa.String(), nullable=True),
    sa.Column('inchikey', sa.String(), nullable=True),
    sa.Column('charge', sa.Integer(), nullable=True),
    sa.Column('spin_multiplicity', sa.Integer(), nullable=True),
    sa.Column('mw', sa.Float(), nullable=True),
    sa.Column('props', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('species_id'),
    sa.UniqueConstraint('inchikey', 'charge', 'spin_multiplicity', name='uq_species_identity')
    )
    op.create_index('ix_species_inchikey', 'species', ['inchikey'], unique=False)
    op.create_table('conformer',
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('species_id', sa.BigInteger(), nullable=False),
    sa.Column('lot_id', sa.BigInteger(), nullable=False),
    sa.Column('geometry_hash', sa.String(), nullable=False),
    sa.Column('well_label', sa.String(), nullable=True),
    sa.Column('is_ts', sa.Boolean(), nullable=False),
    sa.Column('mol', db.types.Mol(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['lot_id'], ['level_of_theory.lot_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['species_id'], ['species.species_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('conformer_id'),
    sa.UniqueConstraint('species_id', 'geometry_hash', 'lot_id', name='uq_conformer_geom')
    )
    op.create_index(op.f('ix_conformer_geometry_hash'), 'conformer', ['geometry_hash'], unique=False)
    op.create_index(op.f('ix_conformer_lot_id'), 'conformer', ['lot_id'], unique=False)
    op.create_index(op.f('ix_conformer_species_id'), 'conformer', ['species_id'], unique=False)
    op.create_index('ix_conformer_well', 'conformer', ['well_label'], unique=False)
    op.create_table('reactions',
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('batch_id', sa.BigInteger(), nullable=True),
    sa.Column('reaction_name', sa.String(), nullable=True),
    sa.Column('family', sa.String(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['ingest_batch.batch_id'], ),
    sa.PrimaryKeyConstraint('reaction_id'),
    sa.UniqueConstraint('reaction_name')
    )
    op.create_table('conformer_atom',
    sa.Column('atom_id', sa.BigInteger(), nullable=False),
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('atom_idx', sa.Integer(), nullable=False),
    sa.Column('atomic_num', sa.Integer(), nullable=False),
    sa.Column('formal_charge', sa.Integer(), nullable=True),
    sa.Column('is_aromatic', sa.Boolean(), nullable=True),
    sa.Column('q_mull', sa.Float(), nullable=True),
    sa.Column('q_apt', sa.Float(), nullable=True),
    sa.Column('spin', sa.Integer(), nullable=True),
    sa.Column('Z', sa.Integer(), nullable=True),
    sa.Column('mass', sa.Float(), nullable=True),
    sa.Column('f_mag', sa.Float(), nullable=True),
    sa.Column('xyz', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('atom_id'),
    sa.UniqueConstraint('conformer_id', 'atom_idx', name='uq_conf_atom_idx')
    )
    op.create_index(op.f('ix_conformer_atom_conformer_id'), 'conformer_atom', ['conformer_id'], unique=False)
    op.create_table('rate_model',
    sa.Column('rate_model_id', sa.BigInteger(), nullable=False),
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('direction', sa.Enum('forward', 'reverse', name='kin_direction', create_constraint=True), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('A', sa.Float(), nullable=False),
    sa.Column('n', sa.Float(), nullable=True),
    sa.Column('Ea_kJ_mol', sa.Float(), nullable=False),
    sa.Column('Tmin_K', sa.Float(), nullable=False),
    sa.Column('Tmax_K', sa.Float(), nullable=False),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('reference', sa.String(), nullable=True),
    sa.Column('computed_from', sa.String(), nullable=True),
    sa.Column('dA_factor', sa.Float(), nullable=True),
    sa.Column('dn_abs', sa.Float(), nullable=True),
    sa.Column('dEa_kJ_mol', sa.Float(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.reaction_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rate_model_id'),
    sa.UniqueConstraint('reaction_id', 'direction', 'source', 'reference', 'Tmin_K', 'Tmax_K', name='uq_kset_identity')
    )
    op.create_index('idx_kset_T', 'rate_model', ['Tmin_K', 'Tmax_K'], unique=False)
    op.create_index('idx_kset_reaction_dir', 'rate_model', ['reaction_id', 'direction'], unique=False)
    op.create_table('reaction_participant',
    sa.Column('participant_id', sa.BigInteger(), nullable=False),
    sa.Column('reaction_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('R1H', 'R2H', 'TS', name='mol_role', create_constraint=True), nullable=False),
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['reaction_id'], ['reactions.reaction_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('participant_id'),
    sa.UniqueConstraint('reaction_id', 'role', name='uq_rxn_role')
    )
    op.create_index(op.f('ix_reaction_participant_conformer_id'), 'reaction_participant', ['conformer_id'], unique=False)
    op.create_index(op.f('ix_reaction_participant_reaction_id'), 'reaction_participant', ['reaction_id'], unique=False)
    op.create_table('ts_features',
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('lot_id', sa.BigInteger(), nullable=False),
    sa.Column('imag_freq_cm1', sa.Float(), nullable=True),
    sa.Column('irc_verified', sa.Boolean(), nullable=True),
    sa.Column('E_TS', sa.Float(), nullable=True),
    sa.Column('E_R1H', sa.Float(), nullable=True),
    sa.Column('E_R2H', sa.Float(), nullable=True),
    sa.Column('delta_E_dagger', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lot_id'], ['level_of_theory.lot_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('conformer_id', 'lot_id')
    )
    op.create_index(op.f('ix_ts_features_lot_id'), 'ts_features', ['lot_id'], unique=False)
    op.create_table('well_features',
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('E_elec', sa.Float(), nullable=True),
    sa.Column('ZPE', sa.Float(), nullable=True),
    sa.Column('H298', sa.Float(), nullable=True),
    sa.Column('G298', sa.Float(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('conformer_id')
    )
    op.create_table('atom_map_to_ts',
    sa.Column('ts_conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('from_conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('from_atom_id', sa.BigInteger(), nullable=False),
    sa.Column('ts_atom_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['from_atom_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['from_conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ts_atom_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ts_conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ts_conformer_id', 'from_conformer_id', 'from_atom_id')
    )
    op.create_table('atom_role_map',
    sa.Column('atom_id', sa.BigInteger(), nullable=False),
    sa.Column('role', sa.Enum('donor', 'acceptor', 'd_hydrogen', 'a_hydrogen', 'none', name='atom_role', create_constraint=True), nullable=False),
    sa.ForeignKeyConstraint(['atom_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('atom_id', 'role')
    )
    op.create_table('geom_angle',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('a3_id', sa.BigInteger(), nullable=False),
    sa.Column('value_deg', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a3_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gang_measure_val', 'geom_angle', ['measure_name', 'value_deg'], unique=False)
    op.create_index(op.f('ix_geom_angle_conformer_id'), 'geom_angle', ['conformer_id'], unique=False)
    op.create_table('geom_dihedral',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('a3_id', sa.BigInteger(), nullable=False),
    sa.Column('a4_id', sa.BigInteger(), nullable=False),
    sa.Column('value_deg', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a3_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a4_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gdih_measure_val', 'geom_dihedral', ['measure_name', 'value_deg'], unique=False)
    op.create_index(op.f('ix_geom_dihedral_conformer_id'), 'geom_dihedral', ['conformer_id'], unique=False)
    op.create_table('geom_distance',
    sa.Column('geom_id', sa.BigInteger(), nullable=False),
    sa.Column('conformer_id', sa.BigInteger(), nullable=False),
    sa.Column('frame', sa.Enum('ref_d_hydrogen', 'ref_a_hydrogen', 'none', name='feature_frame', create_constraint=True), nullable=False),
    sa.Column('a1_id', sa.BigInteger(), nullable=False),
    sa.Column('a2_id', sa.BigInteger(), nullable=False),
    sa.Column('value_ang', sa.Float(), nullable=False),
    sa.Column('measure_name', sa.String(), nullable=False),
    sa.Column('feature_ver', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['a1_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['a2_id'], ['conformer_atom.atom_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['conformer_id'], ['conformer.conformer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('geom_id')
    )
    op.create_index('idx_gdist_measure_val', 'geom_distance', ['measure_name', 'value_ang'], unique=False)
    op.create_index(op.f('ix_geom_distance_conformer_id'), 'geom_distance', ['conformer_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_geom_distance_conformer_id'), table_name='geom_distance')
    op.drop_index('idx_gdist_measure_val', table_name='geom_distance')
    op.drop_table('geom_distance')
    op.drop_index(op.f('ix_geom_dihedral_conformer_id'), table_name='geom_dihedral')
    op.drop_index('idx_gdih_measure_val', table_name='geom_dihedral')
    op.drop_table('geom_dihedral')
    op.drop_index(op.f('ix_geom_angle_conformer_id'), table_name='geom_angle')
    op.drop_index('idx_gang_measure_val', table_name='geom_angle')
    op.drop_table('geom_angle')
    op.drop_table('atom_role_map')
    op.drop_table('atom_map_to_ts')
    op.drop_table('well_features')
    op.drop_index(op.f('ix_ts_features_lot_id'), table_name='ts_features')
    op.drop_table('ts_features')
    op.drop_index(op.f('ix_reaction_participant_reaction_id'), table_name='reaction_participant')
    op.drop_index(op.f('ix_reaction_participant_conformer_id'), table_name='reaction_participant')
    op.drop_table('reaction_participant')
    op.drop_index('idx_kset_reaction_dir', table_name='rate_model')
    op.drop_index('idx_kset_T', table_name='rate_model')
    op.drop_table('rate_model')
    op.drop_index(op.f('ix_conformer_atom_conformer_id'), table_name='conformer_atom')
    op.drop_table('conformer_atom')
    op.drop_table('reactions')
    op.drop_index('ix_conformer_well', table_name='conformer')
    op.drop_index(op.f('ix_conformer_species_id'), table_name='conformer')
    op.drop_index(op.f('ix_conformer_lot_id'), table_name='conformer')
    op.drop_index(op.f('ix_conformer_geometry_hash'), table_name='conformer')
    op.drop_table('conformer')
    op.drop_index('ix_species_inchikey', table_name='species')
    op.drop_table('species')
    op.drop_index('idx_lot_method_basis', table_name='level_of_theory')
    op.drop_table('level_of_theory')
    op.drop_table('ingest_batch')
    # ### end Alembic commands ###
